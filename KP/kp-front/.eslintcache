[{"C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\index.js":"1","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\reportWebVitals.js":"2","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\App.js":"3","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\ConfirmationPaypal.js":"4","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\PaymentMethods.js":"5","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\RegisterSeller.js":"6","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\StatusFailed.js":"7","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\StatusError.js":"8","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\StatusSuccess.js":"9"},{"size":565,"mtime":1611352515533,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1610300378955,"results":"12","hashOfConfig":"11"},{"size":1201,"mtime":1612703693629,"results":"13","hashOfConfig":"11"},{"size":1781,"mtime":1610494086213,"results":"14","hashOfConfig":"11"},{"size":4435,"mtime":1612207652821,"results":"15","hashOfConfig":"11"},{"size":4684,"mtime":1612703693632,"results":"16","hashOfConfig":"11"},{"size":608,"mtime":1612703693636,"results":"17","hashOfConfig":"11"},{"size":537,"mtime":1612703693634,"results":"18","hashOfConfig":"11"},{"size":546,"mtime":1612703693637,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qnftrn",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"22"},"C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\index.js",[],["46","47"],"C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\reportWebVitals.js",[],"C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\App.js",["48","49","50"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport PaymentsMethods from './PaymentMethods';\r\nimport ConfirmationPaypal from './ConfirmationPaypal';\r\nimport RegisterSeller from './RegisterSeller';\r\nimport StatusSuccess from './StatusSuccess';\r\nimport StatusFailed from './StatusFailed';\r\nimport StatusError from './StatusError';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    \r\n  } \r\n\r\n\r\n  render () {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" /> \r\n          <Route exact path=\"/:id/:amount\" component={PaymentsMethods} />\r\n          <Route path=\"/confirmationPaypal\" component={ConfirmationPaypal} />\r\n          <Route path=\"/registration\" component={RegisterSeller} />\r\n          <Route path=\"/success\" component={StatusSuccess} />\r\n          <Route path=\"/failed\" component={StatusFailed} />\r\n          <Route path=\"/error\" component={StatusError} />\r\n        </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\ConfirmationPaypal.js",["51"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass ConfirmationPaypal extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    let params = new window.URLSearchParams(window.location.search)\r\n    let paymentId = params.get('paymentId')\r\n    let token = params.get('token')\r\n    let PayerID = params.get('PayerID')\r\n    this.state={\r\n      paymentId: paymentId,\r\n      token: token,\r\n      PayerID: PayerID\r\n  }} \r\n    componentDidMount(){\r\n      console.log(this.state.paymentId);\r\n      console.log(this.state.token);\r\n      console.log(this.state.PayerID);\r\n    }\r\n      confirm = async ()=>{\r\n        try {\r\n         \r\n          let response = await (await fetch(`http://localhost:8085/complete/payment?paymentId=${this.state.paymentId}&token=${this.state.token}&PayerID=${this.state.PayerID}`, {\r\n              method: 'get',\r\n              headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              },\r\n              \r\n            })).json();\r\n            alert('Uspesna preplata');\r\n            console.log(response);\r\n          } catch (err) {\r\n            this.setState({\r\n              errors: err.toString()\r\n            });\r\n          }\r\n      }\r\n      render (){\r\n          return ( \r\n            <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            <div className=\"main-container\">\r\n              <div><h4>Confirm paypal payment</h4></div>\r\n                <button className = \"btn btn-primary\" onClick = {this.confirm } >\r\n                  Confirm\r\n                </button>\r\n              </div>\r\n            </header>\r\n          </div>\r\n      )\r\n      }\r\n\r\n\r\n    }\r\n\r\n    export default ConfirmationPaypal;","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\PaymentMethods.js",["52","53"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\nimport paypal from './assets/paypal.png';\r\nimport bitcoin from './assets/bitcoin.png';\r\nimport bank from './assets/bank.png';\r\n\r\nclass PaymentsMethods extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    this.state={\r\n      paymentsMethods: [], \r\n      error: '',\r\n      merchantId: props.match.params.id,\r\n      amount: props.match.params.amount,\r\n      paymentsMethodsList: []\r\n    }\r\n  } \r\n\r\n  //get all method for merchant\r\n  componentDidMount = async () => {\r\n    try {\r\n      let response = await (await fetch(`http://localhost:8084/getTypes/${this.state.merchantId}`, {\r\n        method: 'get',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE',\r\n          'Access-Control-Allow-Origin': '*'\r\n        },\r\n      })).json();\r\n      this.setState({\r\n        paymentsMethods: response.paymentTypes,\r\n      })\r\n    } catch (err) {\r\n      this.setState({\r\n        errors: err.toString()\r\n      });\r\n    }\r\n  }\r\n\r\n  //on pay click\r\n  getMethod = async (e, selectedPayment)  => {\r\n    console.log(selectedPayment);\r\n    if (selectedPayment === \"BANK\") {\r\n      console.log('tu sam');\r\n      console.log(this.state.merchantId);\r\n      console.log(this.state.amount);\r\n      let requestDTO = {};\r\n      requestDTO.id = this.state.merchantId;\r\n      requestDTO.amount = this.state.amount;\r\n      try {\r\n      let response = await (await fetch('http://localhost:8084/PaymentBank', {\r\n          method: 'post',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            id: this.state.merchantId, amount: this.state.amount\r\n          })\r\n        })).json();\r\n        console.log(response)\r\n        if (response.status === 'fail') {\r\n          alert('Something went wrong');\r\n        } else if (response.status === \"success\") {\r\n          if (response.data) {\r\n            window.close();\r\n            window.open(\r\n                response.data,\r\n                '_blank'\r\n            );\r\n          }\r\n        }\r\n      } catch (err) {\r\n        this.setState({\r\n          errors: err.toString()\r\n        });\r\n      }\r\n    } else if (selectedPayment === \"CRYPTO\") {\r\n      let res='http://localhost:4202/?amount='+this.state.amount;\r\n      window.open(\r\n          res,\r\n          '_blank'\r\n      );\r\n\r\n    } else if (selectedPayment === \"PAYPAL\") {\r\n      try {\r\n        let response = await (await fetch('http://localhost:8084/PaymentPaypal', {\r\n            method: 'post',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                amount: this.state.amount\r\n            })\r\n          })).json();\r\n          console.log(response);\r\n          if (response.status === \"success\"){\r\n              if(response.redirect_url){\r\n                window.open(response.redirect_url,\"_blank\")\r\n              }\r\n          }else{\r\n            alert(\"something went wrong \");\r\n          }\r\n        } catch (err) {\r\n          this.setState({\r\n            errors: err.toString()\r\n          });\r\n        }\r\n    }\r\n    \r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div className=\"main-container\">\r\n          <div><h4>Choose payment method</h4></div>\r\n          {this.state.paymentsMethods && this.state.paymentsMethods.map(item => {\r\n            let src = '';\r\n            if (item === 'CRYPTO') {\r\n              src = bitcoin;\r\n            } else if (item === 'BANK') {\r\n              src = bank;\r\n            } else if (item === 'PAYPAL') {\r\n              src = paypal;\r\n            }\r\n            return(\r\n              <div className=\"item\" onClick={e => this.getMethod(e, item)}>\r\n                <div className=\"inline\">\r\n                  <img width=\"25px\" height=\"25px\" className=\"image\" src={src} />\r\n                </div>\r\n                <div className=\"inline padding-bottom\">\r\n                  {item}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\nexport default PaymentsMethods;\r\n","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\RegisterSeller.js",["54","55","56","57","58","59"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\nimport paypal from './assets/paypal.png';\r\nimport bitcoin from './assets/bitcoin.png';\r\nimport bank from './assets/bank.png';\r\n\r\n\r\nclass RegisterSeller extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    this.state={\r\n      paymentsMethods: ['paypal'], \r\n      error: '',\r\n      seller: {},\r\n      bank: \"1\"\r\n    }\r\n  } \r\n\r\n  componentDidMount = async () => {\r\n\r\n  }\r\n\r\n  onChange = (value) => {\r\n    if (!this.state.paymentsMethods.includes(value)) {\r\n      this.setState({\r\n        paymentsMethods: this.state.paymentsMethods.concat([value])\r\n      })\r\n    } else {\r\n      this.setState({\r\n        paymentsMethods: this.state.paymentsMethods.filter(item => item !== value)\r\n      })\r\n    }\r\n  }\r\n\r\n  submit = async (e) => {\r\n    console.log(\"submit\")\r\n    e.preventDefault();\r\n    try {\r\n      let response = await (await fetch(`http://localhost:8084/addMerchant`, {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          //'Authorization': 'Bearer ' + localStorage.getItem(\"token\"),\r\n          'X-Auth-Token': localStorage.getItem(\"token\")\r\n        }, \r\n        body: JSON.stringify({\r\n          name: this.state.seller.name,\r\n          address: this.state.seller.address,\r\n          password: this.state.seller.password,\r\n          phoneNumber: this.state.seller.phoneNumber,\r\n          paymentTypes: this.state.paymentsMethods.join(','),\r\n          bankId: this.state.bank\r\n        })\r\n      })).json();\r\n      if (response.status == 'fail') {\r\n        alert(response.message);\r\n      } else {\r\n        alert(response.message);\r\n      }\r\n    } catch (err) {\r\n      this.setState({\r\n        errors: err.toString()\r\n      });\r\n    }\r\n  }\r\n  onChangeField = (e, field) => {\r\n    let seller = {...this.state.seller};\r\n    seller[field]= e.target.value;\r\n    this.setState({\r\n      seller: seller\r\n    })\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div className=\"main-container\">\r\n          <div><h4>Register as Seller</h4></div>\r\n        </div>\r\n          <form className=\"mt-3 needs-validation\" role=\"form\"  onSubmit={this.submit}>\r\n            <p className=\"font-12 m-0 p-0 align-left\">Name:</p>\r\n            <input className=\"font-12\" type=\"text\" name=\"name\" required onChange={e => this.onChangeField(e, 'name')}/>\r\n            <p className=\"font-12 m-0 p-0 align-left\">Password:</p>\r\n            <input className=\"font-12\" type=\"password\" name=\"password\" required  onChange={e => this.onChangeField(e, 'password')}/>\r\n            <p className=\"font-12 m-0 p-0 align-left\">Address:</p>\r\n            <input className=\"font-12\" type=\"text\" name=\"address\" required  onChange={e => this.onChangeField(e, 'address')}/>\r\n            <p className=\"font-12 m-0 p-0 align-left\">Phone number:</p>\r\n            <input className=\"font-12\" type=\"text\" name=\"phone\" required  onChange={e => this.onChangeField(e, 'phone')}/>\r\n            <div className=\"mt-2\">\r\n              <div>\r\n                <input type=\"checkbox\" value=\"paypal\" checked={this.state.paymentsMethods.includes(\"paypal\") ? true : false} name=\"paypal\" onChange={e => this.onChange(e.target.value)} />\r\n                <img className=\"ml-2\" src={paypal} width=\"32px\" height=\"32px\"/>\r\n              </div>\r\n              <div>\r\n                <input type=\"checkbox\" value=\"bitcoin\" checked={this.state.paymentsMethods.includes(\"bitcoin\") ? true : false} onChange={e => this.onChange(e.target.value)}  />\r\n                <img className=\"ml-2\" src={bitcoin} width=\"32px\" height=\"32px\" />\r\n              </div>\r\n              <div>\r\n                <input type=\"checkbox\"  value=\"bank\" checked={this.state.paymentsMethods.includes(\"bank\") ? true: false} onChange={e => this.onChange(e.target.value)}  />\r\n                <img className=\"ml-2\" src={bank} width=\"32px\" height=\"32px\"/>\r\n              </div>\r\n              <div>\r\n                <p className=\"font-12 m-0 p-0 align-left\">Select Bank</p>\r\n                <select className=\"font-12 m-0 p-0 align-left w-100\" value={this.state.bank} onChange={e => this.setState({ bank: e.target.value})} >\r\n                  <option value=\"1\">Bank 1</option>\r\n                  <option value=\"2\">Bank 2</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <button className=\"btn btn-primary mt-3\" type=\"submit\">Register</button>\r\n          </form>\r\n      \r\n        </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RegisterSeller;","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\StatusFailed.js",["60"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass StatusFailed extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    this.state={\r\n    }\r\n  } \r\n\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div className=\"main-container\">\r\n          <div><h4>Payment Failed</h4></div>\r\n          <div><p>Something went wrong, please try again</p></div>\r\n        </div>\r\n      \r\n        </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default StatusFailed;","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\StatusError.js",["61"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass StatusError extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    this.state={\r\n    }\r\n  } \r\n\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div className=\"main-container\">\r\n          <div><h4>Payment Error</h4></div>\r\n        </div>\r\n      \r\n        </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default StatusError;","C:\\Users\\stefan\\Documents\\GitHub\\LiteralnoUdruzenje\\KP\\kp-front\\src\\StatusSuccess.js",["62"],"import logo from './logo.svg';\r\nimport React, { Component} from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass StatusSuccess extends Component {\r\n  constructor(props) {\r\n    super (props)\r\n    this.state={\r\n    }\r\n  } \r\n\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div className=\"main-container\">\r\n          <div><h4>Payment Successful</h4></div>\r\n        </div>\r\n      \r\n        </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default StatusSuccess;",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},{"ruleId":"67","severity":1,"message":"71","line":8,"column":3,"nodeType":"69","messageId":"70","endLine":8,"endColumn":7},{"ruleId":"72","severity":1,"message":"73","line":18,"column":3,"nodeType":"74","messageId":"75","endLine":21,"endColumn":4},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},{"ruleId":"76","severity":1,"message":"77","line":134,"column":19,"nodeType":"78","endLine":134,"endColumn":81},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},{"ruleId":"79","severity":1,"message":"80","line":57,"column":27,"nodeType":"81","messageId":"82","endLine":57,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":83,"column":11,"nodeType":"78","endLine":83,"endColumn":87},{"ruleId":"76","severity":1,"message":"77","line":95,"column":17,"nodeType":"78","endLine":95,"endColumn":80},{"ruleId":"76","severity":1,"message":"77","line":99,"column":17,"nodeType":"78","endLine":99,"endColumn":82},{"ruleId":"76","severity":1,"message":"77","line":103,"column":17,"nodeType":"78","endLine":103,"endColumn":78},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":12},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","no-global-assign","no-unsafe-negation"]